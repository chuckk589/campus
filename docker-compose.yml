version: '3.8'
services:
  redis:
    image: redis:latest
    restart: always
    command: ["redis-server", "--bind", "redis", "--port", "6379"]
    ports:
      - '6379:6379'
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
  adminer:
    image: adminer:latest
    restart: unless-stopped
    environment:
      ADMINER_DEFAULT_SERVER: mysqldb
    ports:
      - 8081:8081
    command: ["php", "-d", "post_max_size=500M", "-d", "upload_max_filesize=500M", "-S", "0.0.0.0:8081", "-t", "/var/www/html"]
  mysqldb:
    image: mysql:5.7
    restart: unless-stopped
    env_file: ./.env
    command: [ "mysqld", "--default-authentication-plugin=mysql_native_password"]
    environment:
      - MYSQL_ROOT_HOST=%
      - MYSQL_ROOT_PASSWORD=$DB_PASSWORD
      - MYSQL_DATABASE=$DB_NAME
    volumes:
      - db:/var/lib/mysql
    ports:
    - 3308:3306
  app:
    depends_on:
      - mysqldb
      - otel-collector
    build:
      context: .
      target: builder
    command: sh -c -f "yarn mikro-orm schema:update --run&&yarn mikro-orm seeder:run --class=ConfigSeeder;yarn run start:prod"
    restart: unless-stopped
    # volumes:
      # - ./data/logs:/app/logs
    env_file: ./.env
    logging:
      driver: "json-file"
      options:
        max-size: "50m" 
      # nestjs-example:
  #   build: .
  #   ports:
  #     - 5555:5555
  #   volumes:
  #     - ./data/logs:/app/logs
  #   environment:
  #     OTEL_SERVICE_NAME: nestjs-full-example
  #     LOG_FILE_NAME: /app/logs/nestjs-example.log
  #   depends_on:
  #     - otel-collector
    environment:
      - NODE_ENV=${NODE_ENV}
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./src/:/app/src/
      - static:/app/dist/public/files
    ports:
      - $PORT:$PORT
    stdin_open: true
    tty: true
  tempo:
    image: grafana/tempo:1.0.1
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./etc/tempo-local.yaml:/etc/tempo.yaml
      - ./data/tempo-data:/tmp/tempo
    ports:
      - "14268"      # jaeger ingest, Jaeger - Thrift HTTP
      - "14250"      # Jaeger - GRPC
      - "55680"      # OpenTelemetry
      - "3100"       # tempo
      - "6831/udp"   # Jaeger - Thrift Compact
      - "6832/udp"   # Jaeger - Thrift Binary
  loki:
    image: grafana/loki:2.2.1
    command: -config.file=/etc/loki/loki-local.yaml
    ports:
      - "3101:3100"                                   # loki needs to be exposed so it receives logs
    environment:
      - JAEGER_AGENT_HOST=tempo
      - JAEGER_ENDPOINT=http://tempo:14268/api/traces # send traces to Tempo
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
    volumes:
      - ./etc/loki-local.yaml:/etc/loki/loki-local.yaml
      - ./data/loki-data:/tmp/loki
  promtail:
    image: grafana/promtail:2.2.1
    command: -config.file=/etc/promtail/promtail-local.yaml
    volumes:
      - ./etc/promtail-local.yaml:/etc/promtail/promtail-local.yaml
      - ./data/logs:/app/logs
    depends_on:
      - app
      - loki
  volume_exporter:
    image: mnadeem/volume_exporter
    command: ["--volume-dir=tempo:/tmp/tempo", "--volume-dir=logs:/app/logs", "--volume-dir=loki:/tmp/loki"]
    volumes:
      - ./data/logs:/app/logs
      - ./data/tempo-data:/tmp/tempo
      - ./data/loki-data:/tmp/loki
    ports:
      - 9889:9888
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./etc/prometheus.yaml:/etc/prometheus.yaml
    entrypoint:
      - /bin/prometheus
      - --config.file=/etc/prometheus.yaml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:8.1.0-ubuntu
    volumes:
      - ./data/grafana-data/datasources:/etc/grafana/provisioning/datasources
      - ./data/grafana-data/dashboards-provisioning:/etc/grafana/provisioning/dashboards
      - ./data/grafana-data/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - tempo
      - loki
      - volume_exporter

  otel-collector:
    image: otel/opentelemetry-collector-dev:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./etc/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "1888:1888"   # pprof extension
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317"        # OTLP gRPC receiver
      - "55670:55679" # zpages extension
    depends_on:
      - tempo
      - prometheus
volumes: 
    db:
    static: